import random
import numpy as np
from baseDS import Graph, Generic

# Ground truth definition using a logit (sigmoid) function
def log_transformation(params0, params1, params2, params3):
    sum = params0 * 2 + params1 - params2 + params3 + random.randint(0,1)
    y = 1 / (1 + np.exp(-sum))
    y = 1 if y > 0.5 else 0
    return y

#Non-linear variant
def log_transformation_nonlinear(params0, params1, params2, params3):
    sum = params0 * pow(2, 4) + params1 + params2 + params3 + random.randint(0,1)
    y = 1 / (1 + np.exp(-sum))
    y = 1 if y > 0.5 else 0
    return y

#2-Dimnesion variant
def log_transformation_dimensionality(params0, params1):
    sum = params0 * 2 + params1 + random.randint(0,1)
    y = 1 / (1 + np.exp(-sum))
    y = 1 if y > 0.5 else 0
    return y

def from_A_get_B(A):
    if A:
        return np.random.binomial(n=1, p=0.4)
    else:
        return np.random.binomial(n=1, p=0.7)

# DAG setup - no interaction
def setup_realworld(pipeline_type, training_n, test_n):
    if(pipeline_type==1):
        Prior1 = Generic(name="A", function=np.random.binomial, arguments={"n": 1, "p": 0.5})
        Prior2 = Generic(name="B", function=np.random.binomial, arguments={"n": 1, "p": 0.5})
        Prior3 = Generic(name="C", function=np.random.binomial, arguments={"n": 1, "p": 0.5})
        Prior4 = Generic(name="D", function=np.random.binomial, arguments={"n": 1, "p": 0.5})
        Node1 = Generic(name="E", function=log_transformation,
                        arguments={"params0": Prior1, "params1": Prior2, "params2": Prior3, "params3": Prior4})

        listNodes = [Prior1, Prior2, Prior3, Prior4, Node1]
        my_graph = Graph("Logistic Regression - Real-world", listNodes)
    elif(pipeline_type==2):
        Prior1 = Generic(name="A", function=np.random.binomial, arguments={"n": 1, "p": 0.5})
        Prior2 = Generic(name="B", function=np.random.binomial, arguments={"n": 1, "p": 0.5})
        Prior3 = Generic(name="C", function=np.random.binomial, arguments={"n": 1, "p": 0.5})
        Prior4 = Generic(name="D", function=np.random.binomial, arguments={"n": 1, "p": 0.5})
        Node1 = Generic(name="E", function=log_transformation_nonlinear,
                        arguments={"params0": Prior1, "params1": Prior2, "params2": Prior3, "params3": Prior4})

        listNodes = [Prior1, Prior2, Prior3, Prior4, Node1]
        my_graph = Graph("Logistic Regression - Real-world", listNodes)
    elif(pipeline_type==3):
        Prior1 = Generic(name="A", function=np.random.binomial, arguments={"n": 1, "p": 0.5})
        Prior2 = Generic(name="B", function=from_A_get_B, arguments={"A": Prior1})
        Prior3 = Generic(name="C", function=from_A_get_B, arguments={"A": Prior1})
        Prior4 = Generic(name="D", function=np.random.binomial, arguments={"n": 1, "p": 0.5})
        Node1 = Generic(name="E", function=log_transformation,
                        arguments={"params0": Prior1, "params1": Prior2, "params2": Prior3, "params3": Prior4})
        listNodes = [Prior1, Prior2, Prior3, Prior4, Node1]
        my_graph = Graph("Logistic Regression - Real-world", listNodes)
    elif(pipeline_type==4):
        Prior1 = Generic(name="A", function=np.random.binomial, arguments={"n": 1, "p": 0.5})
        Prior2 = Generic(name="B", function=np.random.binomial, arguments={"n": 1, "p": 0.5})
        Node1 = Generic(name="E", function=log_transformation_dimensionality,
                        arguments={"params0": Prior1, "params1": Prior2})
        listNodes = [Prior1, Prior2, Node1]
        my_graph = Graph("Logistic Regression - Real-world", listNodes)

    # simulate data for training and testing, with study-specific sample sizes
    train = my_graph.simulate(training_n, csv_name="train")
    test = my_graph.simulate(test_n, csv_name="test")
